using LinearAlgebra

struct POMDP
    Œ≥::Float64
    ùíÆ::Vector{Int}
    ùíú::Vector{Int}
    ùí™::Vector{Int}
    T::Function
    O::Function
    R::Function
end

#states: s
const NORMAL = 0
const MALFUNCTION = 1
const STATES = [NORMAL, MALFUNCTION]

#actions: m
const FLY = 0
const MAINTENANCE = 1
const ACTIONS = [FLY, MAINTENANCE]

#observations: w
const OK = 0
const WARNING = 1
const OBSERVATIONS = [WARNING, OK]

function transition(s, a, s‚Ä≤)
    if a == FLY && s == NORMAL
        return s‚Ä≤ == NORMAL ? 0.95 : 0.05
    elseif a == MAINTENANCE && s == NORMAL
        return s‚Ä≤ == NORMAL ? 1.0 : 0.0
    elseif a == FLY && s == MALFUNCTION
        return s‚Ä≤ == MALFUNCTION ? 1.0 : 0.0
    elseif a == MAINTENANCE && s == MALFUNCTION
        return s‚Ä≤ == NORMAL ? 0.98 : 0.02
    end
end

function observation(a, s‚Ä≤, o)
    if s‚Ä≤ == OK
        return o == OK ? 0.99 : 0.05
    elseif s‚Ä≤ == MALFUNCTION
        return o == WARNING ? 0.7 : 0.3
    end
end

function reward(s, a)
    r = s == HUNGRY ? -10.0 : 0.0
    if a == FEED
        r -= 5.0
    elseif a == SING
        r -= 0.5
    end
    return r
end

function AircraftMonitoringPOMDP(Œ≥::Float64)
    return POMDP(
        Œ≥,
        STATES,
        ACTIONS,
        OBSERVATIONS,
        transition,
        observation,
        reward
    )
end

export AircraftMonitoringPOMDP, NORMAL, MALFUNCTION, OK, WARNING, FLY, MAINTENANCE
